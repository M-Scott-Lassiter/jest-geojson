// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Error Snapshot Testing. Throws error: At least one geometry when no argument provided to Range1 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).not.toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Expected input to not be a valid GeoJSON GeometryCollection object.

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Empty Collection with exact value specified 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).not.toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Expected input to not be a valid GeoJSON GeometryCollection object.

Received:  [31m{\\"geometries\\": [], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Empty Collection with range specified 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).not.toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Expected input to not be a valid GeoJSON GeometryCollection object.

Received:  [31m{\\"geometries\\": [], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Invalid input to matcher 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Must have a type property with value 'GeometryCollection'.

Received:  [31mfalse[39m"
`;

exports[`Error Snapshot Testing. Throws error: No objects in geometries 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Expected no objects in the \\"geometries\\" property.

Received:  [31m{\\"geometries\\": [], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Out of range 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Geometries has has count of [31m4[39m, expected between [32m5[39m and [32m20[39m.

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Range1 is negative 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Range1 must be greater than 0. Provided: [32m-1[39m

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Range1 must be a number 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Range1 must be a number.

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Range2 is negative 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Range2 must be greater than 0. Provided: [32m-1[39m

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Range2 must be a number 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Range2 must be a number or undefined.

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Searching for wrong number of geometries 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1[39m[2m)[22m

Geometries has count of [31m4[39m, expected [32m3[39m.

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Valid Range1 undefined and valid Range2 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Cannot use Range2 if Range1 is undefined.

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Valid Range2 less than valid Range1 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Range2 ([32m1[39m) must be greater than or equal to Range1 ([32m2[39m).

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;

exports[`Error Snapshot Testing. Throws error: Valid use case passes 1`] = `
"[2mexpect([22m[31mGeometryObject[39m[2m).not.toHaveGeometryCount([22m[32mRange1, Range2[39m[2m)[22m

Expected input to not be a valid GeoJSON GeometryCollection object.

Received:  [31m{\\"geometries\\": [{\\"coordinates\\": [100, 0], \\"type\\": \\"Point\\"}, {\\"coordinates\\": [[101, 0], [102, 1]], \\"type\\": \\"LineString\\"}, {\\"coordinates\\": [[[102, 2], [103, 2], [103, 3], [102, 3], [102, 2]]], \\"type\\": \\"Polygon\\"}, {\\"coordinates\\": [150, 73], \\"type\\": \\"Point\\"}], \\"type\\": \\"GeometryCollection\\"}[39m"
`;
